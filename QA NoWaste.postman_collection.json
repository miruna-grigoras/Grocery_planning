{
	"info": {
		"_postman_id": "e93ddae4-12d4-4d2c-bc0f-23142d928764",
		"name": "QA NoWaste",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46840813"
	},
	"item": [
		{
			"name": "Recipes",
			"item": [
				{
					"name": "Get Recipes",
					"item": [
						{
							"name": "Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response body is an object\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"Recipe has required fields\", function () {",
											"    let jsonData = pm.response.json();",
											"    if (jsonData.length > 0) {",
											"        pm.expect(jsonData[0]).to.have.property(\"title\");",
											"        pm.expect(jsonData[0]).to.have.property(\"ingredients\");",
											"        pm.expect(jsonData[0]).to.have.property(\"instructions\");",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"Recipe has at least 1 step\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.steps.length).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": [
										{
											"key": "service",
											"value": "execute-api",
											"type": "string"
										},
										{
											"key": "region",
											"value": "eu-central-1",
											"type": "string"
										},
										{
											"key": "secretKey",
											"value": "{{AWS_SECRET_ACCESS_KEY}}",
											"type": "string"
										},
										{
											"key": "accessKey",
											"value": "{{AWS_ACCESS_KEY_ID}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{COGNITO_ID_TOKEN}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://g3doh0m91f.execute-api.eu-central-1.amazonaws.com/mirunadev/recipes",
									"protocol": "https",
									"host": [
										"g3doh0m91f",
										"execute-api",
										"eu-central-1",
										"amazonaws",
										"com"
									],
									"path": [
										"mirunadev",
										"recipes"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403 Forbidden\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has message about missing authentication\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://g3doh0m91f.execute-api.eu-central-1.amazonaws.com/mirunadev/recipes",
									"protocol": "https",
									"host": [
										"g3doh0m91f",
										"execute-api",
										"eu-central-1",
										"amazonaws",
										"com"
									],
									"path": [
										"mirunadev",
										"recipes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Post Recipes",
					"item": [
						{
							"name": "Old Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response is JSON with recipe fields\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.any.keys(\"ingredients\", \"steps\"); \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Recipe fields have correct types\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.be.a(\"string\");\r",
											"    if (jsonData.ingredients) {\r",
											"        pm.expect(jsonData.ingredients).to.be.an(\"array\");\r",
											"    }\r",
											"    if (jsonData.steps) {\r",
											"        pm.expect(jsonData.steps).to.be.an(\"array\");\r",
											"    }\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Recipe has title and steps\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"steps\");\r",
											"    pm.expect(jsonData.steps).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.steps.length).to.be.above(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": [
										{
											"key": "service",
											"value": "execute-api",
											"type": "string"
										},
										{
											"key": "region",
											"value": "eu-central-1",
											"type": "string"
										},
										{
											"key": "secretKey",
											"value": "{{AWS_SECRET_ACCESS_KEY}}",
											"type": "string"
										},
										{
											"key": "accessKey",
											"value": "{{AWS_ACCESS_KEY_ID}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ingredients\": [\"garlic\", \"rice\", \"tomatoes\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://g3doh0m91f.execute-api.eu-central-1.amazonaws.com/mirunadev/recipes",
									"protocol": "https",
									"host": [
										"g3doh0m91f",
										"execute-api",
										"eu-central-1",
										"amazonaws",
										"com"
									],
									"path": [
										"mirunadev",
										"recipes"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Recipe is generated even for new ingredient\", () => {",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"steps\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": [
										{
											"key": "service",
											"value": "execute-api",
											"type": "string"
										},
										{
											"key": "region",
											"value": "eu-central-1",
											"type": "string"
										},
										{
											"key": "secretKey",
											"value": "{{AWS_SECRET_ACCESS_KEY}}",
											"type": "string"
										},
										{
											"key": "accessKey",
											"value": "{{AWS_ACCESS_KEY_ID}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ingredients\": [\"broccoli\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://g3doh0m91f.execute-api.eu-central-1.amazonaws.com/mirunadev/recipes",
									"protocol": "https",
									"host": [
										"g3doh0m91f",
										"execute-api",
										"eu-central-1",
										"amazonaws",
										"com"
									],
									"path": [
										"mirunadev",
										"recipes"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "!!!Unknown Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// let jsonData = pm.response.json();\r",
											"\r",
											"// pm.test(\"Response has fallback recipe\", () => {\r",
											"//     pm.expect(jsonData).to.have.property(\"title\", \"Weeknight Dish\");\r",
											"//     pm.expect(jsonData).to.have.property(\"steps\");\r",
											"//     pm.expect(jsonData.steps).to.be.an(\"array\");\r",
											"// });\r",
											"\r",
											"\r",
											"//aplicatia returneaza Weeknight Dish cand api-ul nu raspunde\r",
											"// mi a dat lasagna de unicorn\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has title and steps\", () => {\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"steps\");\r",
											"    pm.expect(jsonData.steps).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"\r",
											"// pm.test(\"Status code is 422 for invalid ingredient\", () => {\r",
											"//     pm.response.to.have.status(422);\r",
											"// });\r",
											"\r",
											"// let jsonData = pm.response.json();\r",
											"// pm.test(\"Error mentions invalid ingredient\", () => {\r",
											"//     pm.expect(jsonData.error).to.eql(\"Invalid ingredient\");\r",
											"// });\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": [
										{
											"key": "service",
											"value": "execute-api",
											"type": "string"
										},
										{
											"key": "region",
											"value": "eu-central-1",
											"type": "string"
										},
										{
											"key": "secretKey",
											"value": "{{AWS_SECRET_ACCESS_KEY}}",
											"type": "string"
										},
										{
											"key": "accessKey",
											"value": "{{AWS_ACCESS_KEY_ID}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ingredients\": [\"unicorn meat\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://g3doh0m91f.execute-api.eu-central-1.amazonaws.com/mirunadev/recipes",
									"protocol": "https",
									"host": [
										"g3doh0m91f",
										"execute-api",
										"eu-central-1",
										"amazonaws",
										"com"
									],
									"path": [
										"mirunadev",
										"recipes"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "awsv4"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Favorites",
			"item": [
				{
					"name": "Get Favorite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// array\r",
									"if (Array.isArray(jsonData)) {\r",
									"    pm.test(\"Favorites is array\", function () {\r",
									"        pm.expect(jsonData).to.be.an(\"array\");\r",
									"    });\r",
									"    if (jsonData.length > 0) {\r",
									"        pm.environment.set(\"fav_id\", jsonData[0].id); // salvez primul id\r",
									"    }\r",
									"}\r",
									"\r",
									"// obiect\r",
									"else {\r",
									"    pm.test(\"Favorites is object\", function () {\r",
									"        pm.expect(jsonData).to.be.an(\"object\");\r",
									"    });\r",
									"    if (jsonData.id) {\r",
									"        pm.environment.set(\"fav_id\", jsonData.id); // salvez id din obiect\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "sessionToken",
									"value": "",
									"type": "string"
								},
								{
									"key": "addAuthDataToQuery",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "service",
									"value": "execute-api",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-central-1",
									"type": "string"
								},
								{
									"key": "secretKey",
									"value": "{{AWS_SECRET_ACCESS_KEY}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AWS_ACCESS_KEY_ID}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{COGNITO_ID_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://g3doh0m91f.execute-api.eu-central-1.amazonaws.com/mirunadev/favorites",
							"protocol": "https",
							"host": [
								"g3doh0m91f",
								"execute-api",
								"eu-central-1",
								"amazonaws",
								"com"
							],
							"path": [
								"mirunadev",
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Favorite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect([200,201]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"Response has title\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"// salvez id-ul adaugat pentru DELETE\r",
									"if (jsonData.id) {\r",
									"    pm.environment.set(\"fav_id\", jsonData.id);\r",
									"}\r",
									"\r",
									"pm.test(\"Response has added favorite\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"title\", \"Potatoes and Mushrooms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{COGNITO_ID_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Potatoes and Mushrooms\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://g3doh0m91f.execute-api.eu-central-1.amazonaws.com/mirunadev/favorites",
							"protocol": "https",
							"host": [
								"g3doh0m91f",
								"execute-api",
								"eu-central-1",
								"amazonaws",
								"com"
							],
							"path": [
								"mirunadev",
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Favorite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let favId = pm.environment.get(\"fav_id\");\r",
									"\r",
									"if (!favId) {\r",
									"    console.warn(\" fav_id nu este setat.  Mai intai ruleaza GET sau POST ca sa setezi un id.\");\r",
									"    postman.setNextRequest(null); \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									"",
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect([200,204]).to.include(pm.response.code);",
									"});",
									"",
									"let jsonData;",
									"try {",
									"    jsonData = pm.response.json();",
									"} catch (e) {}",
									"",
									"if (jsonData) {",
									"    pm.test(\"Response confirms deletion\", function () {",
									"        pm.expect(jsonData.message || jsonData.status).to.include(\"deleted\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://g3doh0m91f.execute-api.eu-central-1.amazonaws.com/mirunadev/favorites/{{fav_id}}",
							"protocol": "https",
							"host": [
								"g3doh0m91f",
								"execute-api",
								"eu-central-1",
								"amazonaws",
								"com"
							],
							"path": [
								"mirunadev",
								"favorites",
								"{{fav_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://template.postman-echo.com"
		}
	]
}
